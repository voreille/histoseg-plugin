from __future__ import annotations
from typing import Protocol, Iterable, Tuple, Optional, Dict, Any
from pathlib import Path
import numpy as np

class CoordsStore(Protocol):
    """Random-access coords per slide."""
    def list_slides(self) -> Iterable[str]: ...
    def has_slide(self, slide_id: str) -> bool: ...
    def coords_len(self, slide_id: str) -> int: ...
    def get_coords(self, slide_id: str) -> np.ndarray:  # (N,2) int32
    def get_attrs(self, slide_id: str) -> Dict[str, Any]: ...
    # optional single-index access if you want
    def get_coord_at(self, slide_id: str, idx: int) -> Tuple[int, int]: ...

class FeatureStore(Protocol):
    """Append-friendly features + coords + metadata per slide."""
    def has_slide(self, slide_id: str) -> bool: ...
    def create(self, slide_id: str, feature_dim: int, *,
               dtype: str = "float32",
               attrs: Optional[Dict[str, Any]] = None) -> None: ...
    def append(self, slide_id: str, feats: np.ndarray, coords: np.ndarray) -> None: ...
    def read_features(self, slide_id: str) -> np.ndarray:  # (N,D)
    def read_coords(self, slide_id: str) -> np.ndarray:     # (N,2)
    def read_attrs(self, slide_id: str) -> Dict[str, Any]: ...
    def set_attrs(self, slide_id: str, attrs: Dict[str, Any]) -> None: ...
    